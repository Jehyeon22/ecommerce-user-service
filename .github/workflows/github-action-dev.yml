# dev환경 pipline

name: github-action-dev

# Controls when the workflow will run
on:
  # main 브랜치에 push 되면 트리거 작동
  push:
    branches: [ "main" ]

jobs:
  # workflow: build-and-test
  build-and-test:
    # 작업을 실행시킬 환경(운영체제)
    runs-on: ubuntu-latest

    steps:
      # 1. Check repository
      - uses: actions/checkout@v3

      # 2. 파이썬 설치
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      # 3. 의존성 설치
      - name: Install Dependencies
        run:
          pip install -r requirements.txt

      # 4. db instance 생성
      - name: Config flask db
        run: |
          flask db init 
          flask db migrate
          flask db upgrade

      # 5. 테스트 도구 설치
      - name: For install Test tools
        run: |
          pip install flake8 pytest

      # 6. flake8 config 파일 수정
      - name: Create flake8 config
        run: |
          echo "[flake8]" > .flake8
          echo "max-line-length = 120" >> .flake8
          echo "ignore = E302, W292" >> .flake8

      # # 7. 테스트 flake8
      # - name: Lint and Test
      #   run: flake8

      # # 8. 테스트 pytest
      # - name: Run tests
      #   run: pytest
      #   continue-on-error: true
          
  # workflow: docker-build-and-push
  docker-build-and-push:
      # 작업을 실행 시킬 환경
      runs-on: ubuntu-latest
      needs: build-and-test

      steps:
        # 1. Check repository
        - name: Checkout Code
          uses: actions/checkout@v3

        # 2. Login to Docker Hub
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        # 3. Build and push Docker image
        - name: Build and Push Docker image
          uses: docker/build-push-action@v6
          with:
            context: .
            push: true
            tags: easy1130/user-service
            
  # workflow: eks-deploy
  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: docker-build-and-push

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name sdkim-clu

      - name: Deploy to EKS
        run: |
          kubectl run user-service --image=easy1130/user-service 

      - name: Verify Deployment
        run: kubectl get pods -n default
